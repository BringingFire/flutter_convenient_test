#!/usr/bin/env bash

HELPMSG="Run golden tests in an Xvfb container.
Scenario: you want to test goldens at home or on CI.
It might break, because you have a different screen size
than the machine the golden was created on.
This creates a virtual X server that will run the test.
It has set screen size, so the goldens will always be deterministic
(the same between runs)
"

# ARG_OPTIONAL_SINGLE([screen-size],[s],[screen size of spawned Xvfb process],[1080x720])
# ARG_OPTIONAL_SINGLE([display],[d],[the display Xvfb will run on],[99])
# ARG_OPTIONAL_SINGLE([extra-test-args],[e],[extra args for the flutter test commnand],[""])
# ARG_HELP([$HELPMSG])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='sdeh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_screen_size="1080x720"
_arg_display="1"
_arg_extra_test_args=""


print_help()
{
	printf '%s\n' "$HELPMSG"
	printf 'Usage: %s [-s|--screen-size <arg>] [-d|--display <arg>] [-e|--extra-test-args <arg>] [-h|--help]\n' "$0"
	printf '\t%s\n' "-s, --screen-size: screen size of spawned Xvfb process (default: '1080x720')"
	printf '\t%s\n' "-d, --display: the display Xvfb will run on (default: '1')"
	printf '\t%s\n' "-e, --extra-test-args: extra args for the flutter test commnand (default: '""')"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-s|--screen-size)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_screen_size="$2"
				shift
				;;
			--screen-size=*)
				_arg_screen_size="${_key##--screen-size=}"
				;;
			-s*)
				_arg_screen_size="${_key##-s}"
				;;
			-d|--display)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_display="$2"
				shift
				;;
			--display=*)
				_arg_display="${_key##--display=}"
				;;
			-d*)
				_arg_display="${_key##-d}"
				;;
			-e|--extra-test-args)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_extra_test_args="$2"
				shift
				;;
			--extra-test-args=*)
				_arg_extra_test_args="${_key##--extra-test-args=}"
				;;
			-e*)
				_arg_extra_test_args="${_key##-e}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

set -euxo pipefail
display_wrapped=":$_arg_display"

Xvfb $display_wrapped -screen 0 "${_arg_screen_size}x24" &
xvfb_pid=$!

export DISPLAY=$display_wrapped

flutter test integration_test/integration_test.dart $_arg_extra_test_args
exit_status=$?

kill "$xvfb_pid" # Xvfb would just run forever, so kill it.

# Exit with the same exit status as the test
exit "$exit_status"

# ] <-- needed because of Argbash
